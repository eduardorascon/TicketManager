<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="pictureBox1.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        /pGerx81nvAAAAAASUVORK5CYII=
</value>
  </data>
</root>